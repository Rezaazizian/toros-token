name: anchor-deploy-devnet

on:
  workflow_dispatch:
    inputs:
      cluster:
        description: "Solana cluster"
        required: true
        default: devnet
      program:
        description: "Program to deploy (anchor workspace member)"
        required: true
        default: trs_staking

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      ANCHOR_WALLET_JSON: ${{ secrets.ANCHOR_WALLET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libudev-dev libusb-1.0-0-dev build-essential bzip2 ca-certificates

      - name: Install Solana CLI (GitHub release)
        run: |
          set -e
          SOLANA_VERSION="1.18.4"
          TARBALL_URL="https://github.com/solana-labs/solana/releases/download/v${SOLANA_VERSION}/solana-release-x86_64-unknown-linux-gnu.tar.bz2"
          echo "Downloading Solana ${SOLANA_VERSION} from ${TARBALL_URL}"
          curl -fL --retry 3 --retry-delay 2 -o /tmp/solana.tar.bz2 "$TARBALL_URL"
          mkdir -p "$HOME/.local/share/solana/install/active_release"
          tar -C "$HOME/.local/share/solana" -xjf /tmp/solana.tar.bz2
          ln -snf "$HOME/.local/share/solana/solana-release/bin" "$HOME/.local/share/solana/install/active_release/bin"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          "$HOME/.local/share/solana/install/active_release/bin/solana" --version

      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          profile: minimal
          override: true

      - name: Install Anchor CLI (v0.31.1)
        run: |
          cargo install --git https://github.com/coral-xyz/anchor anchor-cli --locked

      - name: Configure wallet and RPC
        run: |
          set -e
          SOLANA_BIN_DIR="$HOME/.local/share/solana/install/active_release/bin"
          export PATH="$SOLANA_BIN_DIR:$PATH"
          mkdir -p "$HOME/.config/solana"
          if [ -z "$ANCHOR_WALLET_JSON" ]; then echo "Missing secret ANCHOR_WALLET" && exit 1; fi
          echo "$ANCHOR_WALLET_JSON" > "$HOME/.config/solana/id.json"
          chmod 600 "$HOME/.config/solana/id.json"
          RPC_URL_INPUT=${{ secrets.SOLANA_RPC_URL }}
          if [ -z "$RPC_URL_INPUT" ]; then RPC_URL_INPUT="https://api.devnet.solana.com"; fi
          "$SOLANA_BIN_DIR/solana" config set --url "$RPC_URL_INPUT" --keypair "$HOME/.config/solana/id.json"
          "$SOLANA_BIN_DIR/solana-keygen" pubkey "$HOME/.config/solana/id.json"

      - name: Prepare program ID
        run: |
          set -e
          SOLANA_BIN_DIR="$HOME/.local/share/solana/install/active_release/bin"
          export PATH="$SOLANA_BIN_DIR:$PATH"
          mkdir -p toros-solana/target/deploy
          if [ ! -f toros-solana/target/deploy/trs_staking-keypair.json ]; then
            "$SOLANA_BIN_DIR/solana-keygen" new -o toros-solana/target/deploy/trs_staking-keypair.json -f --no-bip39-passphrase >/dev/null 2>&1
          fi
          PROG_ID=$("$SOLANA_BIN_DIR/solana-keygen" pubkey toros-solana/target/deploy/trs_staking-keypair.json)
          echo "Program ID: $PROG_ID"
          if [ -z "$PROG_ID" ]; then echo "Failed to derive program id" >&2; exit 1; fi
          sed -i -E "s|^trs_staking = \".*\"|trs_staking = \"$PROG_ID\"|g" toros-solana/Anchor.toml
          sed -i -E "s|declare_id!\(\"[^\"]+\"\)|declare_id!(\"$PROG_ID\")|g" toros-solana/programs/trs_staking/src/lib.rs
          # Ensure resolver = "2"
          if ! grep -q '^workspace\.resolver' toros-solana/Cargo.toml 2>/dev/null; then
            printf '\nworkspace.resolver = "2"\n' >> toros-solana/Cargo.toml
          fi

      - name: Align Anchor deps to 0.31.1
        run: |
          set -e
          sed -i -E "s|anchor-lang\s*=\s*\"0\.30\.1\"|anchor-lang = \"0.31.1\"|g" toros-solana/programs/trs_staking/Cargo.toml || true
          sed -i -E "s|anchor-spl\s*=\s*\{([^}]*)version:\s*\"0\.30\.1\"|anchor-spl = {\1version: \"0.31.1\"|g" toros-solana/programs/trs_staking/Cargo.toml || true
          sed -i -E "s|anchor-spl\s*=\s*\"0\.30\.1\"|anchor-spl = \"0.31.1\"|g" toros-solana/programs/trs_staking/Cargo.toml || true
          if ! grep -q '^\[toolchain\]' toros-solana/Anchor.toml; then
            printf '\n[toolchain]\nanchor_version = "0.31.1"\n' >> toros-solana/Anchor.toml
          else
            sed -i -E "s|^anchor_version\s*=\s*\".*\"|anchor_version = \"0.31.1\"|g" toros-solana/Anchor.toml
          fi

      - name: Build workspace
        working-directory: toros-solana
        run: |
          rustup override set nightly
          rm -f Cargo.lock
          cargo +nightly -Z next-lockfile-bump generate-lockfile
          anchor build

      - name: Deploy program
        working-directory: toros-solana
        env:
          ANCHOR_WALLET: ${{ env.HOME }}/.config/solana/id.json
        run: anchor deploy -p "${{ github.event.inputs.program }}" --provider.cluster "${{ github.event.inputs.cluster }}"

      - name: Upload deploy artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: anchor-target
          path: toros-solana/target/deploy/**